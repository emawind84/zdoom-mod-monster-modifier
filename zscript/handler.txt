class monster_Handler : EventHandler
{
    override void WorldLoaded(WorldEvent e)
    {
    }

    override void WorldThingSpawned(WorldEvent e)
    {
        if(e.Thing && e.Thing.bISMONSTER && e.Thing.bCOUNTKILL)
		{
            let t = new("monster_BaseController");
            t.a = e.Thing;
        }
    }
}

class monster_BaseController : Thinker
{
    actor a;
    bool setup;
    state prevState;
    int tic; 
    int eftic;
    
    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        dscmonster_InitEffect();
    }

    override void Tick()
    {
        super.Tick();

        if (a) {
            if (a != null && !setup)
            {
                setup = true;
            }

            if(a && eftic && ++tic == eftic)
            {
                dscmonster_TickEffect();
                tic = 0;
            }
        }
    }

    void dscmonster_InitEffect(){
        eftic = 1;
        a.DamageMultiply *= dsc_static.returnCVarFloat('dsc_monsterDamageMultiply');
        a.DamageFactor *= dsc_static.returnCVarFloat('dsc_monsterDamageFactor');
        a.Health = int(a.Health * dsc_static.returnCVarFloat('dsc_monsterHealthMultiply'));
        a.bALWAYSRESPAWN = dsc_static.returnCVar('dsc_monsterAlwaysRespawn')? true : false;
        if (dsc_static.returnCVar('dsc_monsterAllBoss')) {
            a.bBOSS = true;
            a.bMISSILEMORE = true;
            a.bMISSILEEVENMORE = true;
            a.bNOFEAR = true;
            a.bALWAYSFAST = true;
            a.bQUICKTORETALIATE = true;
            a.bFORCEINFIGHTING = true;
        }
        //console.printf("%s: %2.2f|%2.2f|%d", a.GetClassName(), a.DamageMultiply, a.DamageFactor, a.Health);
    }

    void dscmonster_TickEffect(){
        if(a && a.health < 1 || a.tics <= 0) { return; }
        if (prevState != a.curState)
        { 
            a.A_SetTics (int(a.tics * 1.0/dsc_static.returnCVarFloat('dsc_monsterSpeedFactor'))); 
        }
        prevState = a.curState;
    }
}